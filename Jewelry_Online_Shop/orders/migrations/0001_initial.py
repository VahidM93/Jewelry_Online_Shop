# Generated by Django 4.2.2 on 2023-08-20 20:36

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('products', '0001_initial'),
        ('customers', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Coupon',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('code', models.CharField(max_length=30, unique=True, verbose_name='Coupon Code')),
                ('valid_since', models.DateTimeField(verbose_name='Valid Since')),
                ('valid_until', models.DateTimeField(verbose_name='Valid Until')),
                ('discount', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(90)], verbose_name='Discount')),
                ('is_active', models.BooleanField(default=None)),
            ],
            options={
                'verbose_name': 'Coupon',
                'verbose_name_plural': 'Coupons',
            },
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_paid', models.BooleanField(default=False, verbose_name='Payment Status')),
                ('discount', models.PositiveIntegerField(blank=True, default=0, editable=False, null=True, verbose_name='Discount')),
                ('city', models.CharField(blank=True, max_length=20, null=True, verbose_name='City')),
                ('body', models.CharField(blank=True, max_length=120, null=True, verbose_name='Address')),
                ('postal_code', models.CharField(blank=True, max_length=10, null=True, validators=[django.core.validators.RegexValidator('\\d{10}', message='Invalid Postal code')], verbose_name='Postal Code')),
                ('phone_number', models.CharField(blank=True, max_length=13, null=True, validators=[django.core.validators.RegexValidator(message='Invalid Phone number. Phone number must be like: +989XXXXXXXXX or 09XXXXXXXXX', regex='^(\\+989|09)+\\d{9}$')])),
                ('status', models.CharField(choices=[('PENDING', 'PENDING'), ('CHECKING', 'CHECKING'), ('SENDING', 'SENDING'), ('DONE', 'DONE')], default='PENDING', max_length=30, verbose_name='Status')),
                ('transaction_code', models.CharField(max_length=20, null=True, verbose_name='Transaction Code')),
                ('coupon', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='coupon_order', to='orders.coupon', verbose_name='Coupon')),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='orders', to='customers.customer', verbose_name='Customer')),
            ],
            options={
                'ordering': ('is_paid', '-updated_at'),
            },
        ),
        migrations.CreateModel(
            name='OrderItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('price', models.PositiveIntegerField()),
                ('quantity', models.PositiveIntegerField(default=1)),
                ('status', models.CharField(choices=[('ok', 'OK'), ('no', 'NO'), ('supplying', 'SUPPLYING')], default='OK', max_length=30)),
                ('post_cost', models.IntegerField(default=0)),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='orders.order')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='products.product')),
            ],
            options={
                'ordering': ('-updated_at', '-created_at'),
                'abstract': False,
            },
        ),
    ]
